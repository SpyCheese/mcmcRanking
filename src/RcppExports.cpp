// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// mcmc_subgraph
CharacterVector mcmc_subgraph(DataFrame df_edges, IntegerVector size, IntegerVector iter);
RcppExport SEXP _mcmcRanking_mcmc_subgraph(SEXP df_edgesSEXP, SEXP sizeSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df_edges(df_edgesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(mcmc_subgraph(df_edges, size, iter));
    return rcpp_result_gen;
END_RCPP
}
// mcmc_sample
NumericVector mcmc_sample(DataFrame df_edges, DataFrame df_nodes, IntegerVector size, IntegerVector times, IntegerVector iter);
RcppExport SEXP _mcmcRanking_mcmc_sample(SEXP df_edgesSEXP, SEXP df_nodesSEXP, SEXP sizeSEXP, SEXP timesSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df_edges(df_edgesSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type df_nodes(df_nodesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type times(timesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(mcmc_sample(df_edges, df_nodes, size, times, iter));
    return rcpp_result_gen;
END_RCPP
}
// mcmc_onelong
NumericVector mcmc_onelong(DataFrame df_edges, DataFrame df_nodes, IntegerVector size, IntegerVector start, IntegerVector end);
RcppExport SEXP _mcmcRanking_mcmc_onelong(SEXP df_edgesSEXP, SEXP df_nodesSEXP, SEXP sizeSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df_edges(df_edgesSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type df_nodes(df_nodesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type start(startSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(mcmc_onelong(df_edges, df_nodes, size, start, end));
    return rcpp_result_gen;
END_RCPP
}
// mcmc_reciprocal_likelihood
NumericVector mcmc_reciprocal_likelihood(DataFrame df_edges, DataFrame df_nodes, IntegerVector size, IntegerVector start, IntegerVector end);
RcppExport SEXP _mcmcRanking_mcmc_reciprocal_likelihood(SEXP df_edgesSEXP, SEXP df_nodesSEXP, SEXP sizeSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df_edges(df_edgesSEXP);
    Rcpp::traits::input_parameter< DataFrame >::type df_nodes(df_nodesSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type size(sizeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type start(startSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(mcmc_reciprocal_likelihood(df_edges, df_nodes, size, start, end));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mcmcRanking_mcmc_subgraph", (DL_FUNC) &_mcmcRanking_mcmc_subgraph, 3},
    {"_mcmcRanking_mcmc_sample", (DL_FUNC) &_mcmcRanking_mcmc_sample, 5},
    {"_mcmcRanking_mcmc_onelong", (DL_FUNC) &_mcmcRanking_mcmc_onelong, 5},
    {"_mcmcRanking_mcmc_reciprocal_likelihood", (DL_FUNC) &_mcmcRanking_mcmc_reciprocal_likelihood, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_mcmcRanking(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
